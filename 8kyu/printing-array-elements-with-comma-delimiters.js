// ‚ùìDESCRIPTION
// Input: Array of elements
// ["h","o","l","a"]
// Output: String with comma delimited elements of the array in th same order.
// "h,o,l,a"
// Note: if this seems too simple for you try the next level
// Note2: the input data can be: boolean array, array of objects, array of string arrays, array of number arrays... üòï

// –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

//     ["h", "o", "l", "a"]

// –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Å—Ç—Ä–æ–∫–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∞—Å—Å–∏–≤–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—è—Ç—ã–º–∏, –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ.

// "h,o,l,a"

// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ —ç—Ç–æ –∫–∞–∂–µ—Ç—Å—è –≤–∞–º —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç—ã–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å

// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2: –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –º–æ–≥—É—Ç –±—ã—Ç—å: –ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤, –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ —Å—Ç—Ä–æ–∫, –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ —á–∏—Å–µ–ª...üòï


// üèì TESTS
// tester([ 2, 4, 5, 2 ], "2,4,5,2");
//     tester([ 2.0, 4.2, 5.1 ,2.2 ], "2,4.2,5.1,2.2");
//     tester([ "2", "4", "5", "2" ], "2,4,5,2");
//     tester([ [ "hello", "this", "is", "an", "array!" ], [ 1, 2, 3, 4, 5 ] ], "hello,this,is,an,array!,1,2,3,4,5");
//     tester([ { firstName: "Ruslan", lastName: "L√≥pez" }, { firstName: "John", lastName: "Doe" } ], '[object Object],[object Object]');
//     tester([ true, false ], 'true,false');


// ‚úÖSOLUTION
function printArray(array) {
    let str = "";

    for (let i = 0; i < array.length; i++) {
        if (i < array.length - 1) {
            str = str + array[i] + ","
        } else {
            str = str + array[i]
        }
    }
    return str

}
console.log(printArray([{ firstName: "Ruslan", lastName: "L√≥pez" }, { firstName: "John", lastName: "Doe" }]));
