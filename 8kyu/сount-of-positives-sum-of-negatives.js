// ‚ùìDESCRIPTION
// Given an array of integers.
// Return an array, where the first element is the count of positives numbers and the second element is sum of negative numbers. 0 is neither positive nor negative.
// If the input is an empty array or is null, return an empty array.
// Example
// For input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15], you should return [10, -65].
// –î–∞–Ω –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
// –í–µ—Ä–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, –∞ –≤—Ç–æ—Ä–æ–π - —Å—É–º–º–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª.
// 0 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º, –Ω–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.
// –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ —Ä–∞–≤–Ω—ã null, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.

// –ü—Ä–∏–º–µ—Ä
// –î–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15] –≤—ã –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å[10, -65].


// üèì TESTS
// let testData = [0, 2, 3, 0, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14];
//     let actual = countPositivesSumNegatives(testData);
//     let expected = [8, -50];    
//     assert.deepEqual(actual, expected);



// ‚úÖSOLUTION
function countPositivesSumNegatives(input) {

    let pozitive = 0;
    let negative = 0;

    if (input === null || input.length === 0) {
        return []
    }

    for (let i = 0; i < input.length; i++) {

        if (input[i] > 0) {
            pozitive++
        } else {
            negative = negative + input[i]
        }
    }
    return [pozitive, negative]
}
console.log(countPositivesSumNegatives(null));
